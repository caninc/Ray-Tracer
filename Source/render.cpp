//Ray Tracing #include <iostream>#include <sstream>#include <fstream>#include <vector>#include <limits>#include <string>#include <stdlib.h>#include <stdio.h>#include <time.h>#include <tiffio.h>#include "Vect.h"#include "Sphere.h"#include "Ray.h"#include "Camera.h"#include "Color.h"#include "Light.h"#include "Object.h"#include "tiff.h"#include "Plane.h"using namespace std;/*- Explanation of Scene FileImageWidth, Image Height ++Vmin Vmax (min max distances of viewing frustum (float)Ray_Reflectionmaximum ray reflection (int)Camera parameters ++Material ParametersTriangle ParametersSphere Parameters ++ Light Parameters ++ Ambient Parameters Background Colorvoid writeTiff(vector<unsigned char> &v,  char *dstFileName){	FILE *fdst;	char c;		fdst = fopen(dstFileName, "wb");	for (int i = 0; i < v.size(); i++) {		fputc(v[i], fdst);	}	fclose(fdst);}void writeTiffTxt(vector<unsigned char> &v,char *srcFile) {	ofstream outputFile;	outputFile.open(srcFile);	for (int i = 0; i < v.size(); i++) {		int temp = (v[i]);		if (temp< 0)			outputFile<<256 + temp << endl;		else			outputFile << temp<<endl;	}	outputFile.close();}void readTiff(vector<unsigned char> &v,char *srcFilename) {	FILE *fsrc;	fsrc = fopen(srcFilename, "rb");	if (fsrc == NULL) {		printf("Couldn't open file %s for reading.\n", srcFilename);		exit(0);	}	for (; !feof(fsrc);) {		v.push_back(fgetc(fsrc));	}}//OPERATOR OVERLOAD ?*/struct RGB{	double r,g,b;};void savebmp (const char *filename, int w, int h, int dpi, RGB *data) {	FILE *f;	int k = w*h;	int s = 4*k;	int filesize = 54 + s;		double factor = 39.375;	int m = static_cast<int>(factor);		int ppm = dpi*m;		unsigned char bmpfileheader[14] = {'B','M', 0,0,0,0, 0,0,0,0, 54,0,0,0};	unsigned char bmpinfoheader[40] = {40,0,0,0, 0,0,0,0, 0,0,0,0, 1,0,24,0};		bmpfileheader[ 2] = (unsigned char)(filesize);	bmpfileheader[ 3] = (unsigned char)(filesize>>8);	bmpfileheader[ 4] = (unsigned char)(filesize>>16);	bmpfileheader[ 5] = (unsigned char)(filesize>>24);		bmpinfoheader[ 4] = (unsigned char)(w);	bmpinfoheader[ 5] = (unsigned char)(w>>8);	bmpinfoheader[ 6] = (unsigned char)(w>>16);	bmpinfoheader[ 7] = (unsigned char)(w>>24);		bmpinfoheader[ 8] = (unsigned char)(h);	bmpinfoheader[ 9] = (unsigned char)(h>>8);	bmpinfoheader[10] = (unsigned char)(h>>16);	bmpinfoheader[11] = (unsigned char)(h>>24);		bmpinfoheader[21] = (unsigned char)(s);	bmpinfoheader[22] = (unsigned char)(s>>8);	bmpinfoheader[23] = (unsigned char)(s>>16);	bmpinfoheader[24] = (unsigned char)(s>>24);		bmpinfoheader[25] = (unsigned char)(ppm);	bmpinfoheader[26] = (unsigned char)(ppm>>8);	bmpinfoheader[27] = (unsigned char)(ppm>>16);	bmpinfoheader[28] = (unsigned char)(ppm>>24);		bmpinfoheader[29] = (unsigned char)(ppm);	bmpinfoheader[30] = (unsigned char)(ppm>>8);	bmpinfoheader[31] = (unsigned char)(ppm>>16);	bmpinfoheader[32] = (unsigned char)(ppm>>24);		f = fopen(filename,"wb");		fwrite(bmpfileheader,1,14,f);	fwrite(bmpinfoheader,1,40,f);		for (int i = 0; i < k; i++) {		RGB rgb = data[i];				double red = (data[i].r)*255;		double green = (data[i].g)*255;		double blue = (data[i].b)*255;				unsigned char color[3] = {(int)floor(blue),(int)floor(green),(int)floor(red)};				fwrite(color,1,3,f);	}		fclose(f);}int collusion(vector<double> object_intersections) {// return the index of the collusion		int index_of_minimum_value;		// prevent unnessary calculations	if (object_intersections.size() == 0) {		return -1;	}	else if (object_intersections.size() == 1) {		if (object_intersections.at(0) > 0) {// if that intersection is greater than zero then its our index of minimum value			return 0;		}		else {			return -1;// otherwise the only intersection value is negative		}	}	else {		// otherwise there is more than one intersection		// first find the maximum value		double max = 0;		for (int i = 0; i < object_intersections.size(); i++) {			if (max < object_intersections.at(i)) {				max = object_intersections.at(i);			}		}				// then starting from the maximum value find the minimum positive value		if (max > 0) {			// we only want positive intersections			for (int index = 0; index < object_intersections.size(); index++) {				if (object_intersections.at(index) > 0 && object_intersections.at(index) <= max) {					max = object_intersections.at(index);					index_of_minimum_value = index;				}			}						return index_of_minimum_value;		}		else {			// all the intersections were negative			return -1;		}	}}Color getColorAt(Vect intersection_position, Vect intersecting_ray_direction, vector<Object*> scene_objects, int index_of_winning_object, vector<Source*> light_sources, double accuracy, double ambientlight) {		Color winning_object_color = scene_objects.at(index_of_winning_object)->getColor();	Vect winning_object_normal = scene_objects.at(index_of_winning_object)->getNormalAt(intersection_position);		if (winning_object_color.getColorSpecial() == 2) {		// checked/tile floor pattern, basicly checks if it's an desired object or just a scene element(background emulation).				int square = (int)floor(intersection_position.getVectX()) + (int)floor(intersection_position.getVectZ());				if ((square % 2) == 0) {			// black tile			winning_object_color.setColorRed(0);			winning_object_color.setColorGreen(0);			winning_object_color.setColorBlue(0);		}		else {			// white tile			winning_object_color.setColorRed(1);			winning_object_color.setColorGreen(1);			winning_object_color.setColorRed(1);		}	}		Color final_color = winning_object_color.colorScalar(ambientlight);		if (winning_object_color.getColorSpecial() > 0 && winning_object_color.getColorSpecial() <= 1) {		// reflection from objects with specular intensity		double dot1 = winning_object_normal.dotProduct(intersecting_ray_direction.negative());		Vect scalar1 = winning_object_normal.vectMult(dot1);		Vect add1 = scalar1.vectAdd(intersecting_ray_direction);		Vect scalar2 = add1.vectMult(2);		Vect add2 = intersecting_ray_direction.negative().vectAdd(scalar2);		Vect reflection_direction = add2.normalize();				Ray reflection_ray (intersection_position, reflection_direction);				// determine what the ray intersects with first		vector<double> reflection_intersections;				for (int reflection_index = 0; reflection_index < scene_objects.size(); reflection_index++) {			reflection_intersections.push_back(scene_objects.at(reflection_index)->findIntersection(reflection_ray));		}		//Collusion of reflections, going into recursion calls here until all the related pixels that has an intersection with the ray are covered.		int index_of_winning_object_with_reflection = collusion(reflection_intersections);				if (index_of_winning_object_with_reflection != -1) {			// reflection ray missed everthing else			if (reflection_intersections.at(index_of_winning_object_with_reflection) > accuracy) {				// determine the position and direction at the point of intersection with the reflection ray				// the ray only affects the color if it reflected off something								Vect reflection_intersection_position = intersection_position.vectAdd(reflection_direction.vectMult(reflection_intersections.at(index_of_winning_object_with_reflection)));				Vect reflection_intersection_ray_direction = reflection_direction;								Color reflection_intersection_color = getColorAt(reflection_intersection_position, reflection_intersection_ray_direction, scene_objects, index_of_winning_object_with_reflection, light_sources, accuracy, ambientlight);								final_color = final_color.colorAdd(reflection_intersection_color.colorScalar(winning_object_color.getColorSpecial()));			}		}	}		//Shadows, tracing back to light sources's direction, position and distance with matrix operations	for (int light_index = 0; light_index < light_sources.size(); light_index++) {		Vect light_direction = light_sources.at(light_index)->getLightPosition().vectAdd(intersection_position.negative()).normalize();				float cosine_angle = winning_object_normal.dotProduct(light_direction);				if (cosine_angle > 0) {						bool shadowed = false;			Vect distance_to_light = light_sources.at(light_index)->getLightPosition().vectAdd(intersection_position.negative()).normalize();			float distance_to_light_magnitude = distance_to_light.magnitude();			Ray shadow_ray (intersection_position, light_sources.at(light_index)->getLightPosition().vectAdd(intersection_position.negative()).normalize());						vector<double> secondary_intersections;//if any						for (int object_index = 0; object_index < scene_objects.size() && shadowed == false; object_index++) {				secondary_intersections.push_back(scene_objects.at(object_index)->findIntersection(shadow_ray));			}						for (int c = 0; c < secondary_intersections.size(); c++) {				if (secondary_intersections.at(c) > accuracy) {					if (secondary_intersections.at(c) <= distance_to_light_magnitude) {						shadowed = true;					}				}				break;			}						if (shadowed == false) {				final_color = final_color.colorAdd(winning_object_color.colorMultiply(light_sources.at(light_index)->getLightColor()).colorScalar(cosine_angle));								if (winning_object_color.getColorSpecial() > 0 && winning_object_color.getColorSpecial() <= 1) {					// special [0-1]					double dot1 = winning_object_normal.dotProduct(intersecting_ray_direction.negative());					Vect scalar1 = winning_object_normal.vectMult(dot1);					Vect add1 = scalar1.vectAdd(intersecting_ray_direction);					Vect scalar2 = add1.vectMult(2);					Vect add2 = intersecting_ray_direction.negative().vectAdd(scalar2);					Vect reflection_direction = add2.normalize();										double specular = reflection_direction.dotProduct(light_direction);					if (specular > 0) {						specular = pow(specular, 10);						final_color = final_color.colorAdd(light_sources.at(light_index)->getLightColor().colorScalar(specular*winning_object_color.getColorSpecial()));					}				}							}					}	}		return final_color.clip();}int main(){	cout <<"Starting.."<< endl;	string line;	ifstream myfile;	myfile.open("config.txt");	if (myfile.is_open()) {				cout<< "Config file success" << endl;	} else {		cout<< "Unable to open file" << endl;	}				int width,height;	double splocx,splocy,splocz,camx,camy,camz,lightposx,lightposy,lightposz,ambientlight,diffuser,diffuseg,diffuseb,spherer,sphereg,sphereb,spherer2,sphereg2,sphereb2;	getline(myfile,line);	//Reading the config file	istringstream iss(line);	cout<< "Config file: ";	cout << line << endl; 	iss>> width >> height>>splocx >> splocy >> splocz >> camx >> camy >> camz >> lightposx >> lightposy >> lightposz >> ambientlight >> diffuser>> diffuseg >> diffuseb >>spherer>>sphereg >> sphereb >> spherer2>> sphereg2 >> sphereb2; 	cout <<"Width is:" << width << endl; 	cout <<"Height is: "<< height << endl; 	double aspectratio = (double)width/(double)height;		Vect campos (camx, camy, camz);	int dpi = 72;	int n = width*height; //total pixel number	RGB *pixels = new RGB[n]; //rgb values for each pixel	//Defining vectors	Vect O (0,0,0);	Vect X (1,0,0);	Vect Y (0,1,0);	Vect Z (0,0,1);	Vect look_at (0, 0, 0);	//Camera vectors	Vect diff_btw (campos.getVectX() - look_at.getVectX(), campos.getVectY() - look_at.getVectY(), campos.getVectZ() - look_at.getVectZ());	Vect camdir = diff_btw.negative().normalize();	Vect camright = Y.crossProduct(camdir).normalize();	Vect camdown = camright.crossProduct(camdir);	Camera scene_cam (campos, camdir, camright, camdown);			//Colors	Color tile_floor (1, 1, 1, 2); // tile 	Color gray (0.5, 0.5, 0.5, 0);	Color black (0.0, 0.0, 0.0, 0);	Color diffuse_light (diffuser, diffuseg, diffuseb, 0);	Color desiredColor( spherer, sphereg,sphereb,0);	Color desiredColor2(spherer2,sphereg2,sphereb2,0);		Vect light_position (lightposx,lightposy,lightposz);	Light scene_light (light_position, diffuse_light);	//second light?	vector<Source*> light_sources;	light_sources.push_back(dynamic_cast<Source*>(&scene_light));	//Scene objects	Vect new_sphere_location (splocx, splocy, splocz);	Vect secondSpherePos(0,1,1);	Vect thirdSpherePos(1,0,0);	Sphere scene_sphere (secondSpherePos, 0.5, desiredColor2); //Default generated sphere	Sphere scene_sphere2(new_sphere_location, 0.8,desiredColor);	Sphere scene_sphere3(thirdSpherePos, 0.5,gray);	Plane scene_plane (Y, -1, tile_floor);	vector<Object*> scene_objects;		//Pushing scene objects	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere2));	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere));	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere3));	scene_objects.push_back(dynamic_cast<Object*>(&scene_plane));		cout << "Scene objects has been inserted. Rendering..."<< endl;	int currentPixel,aa_index;	double tempRed, tempGreen, tempBlue,xamnt, yamnt;	const int aadepth = 8;	const double aathreshold = 0.1;	double accuracy = 0.00000001;	clock_t t1, t2;	t1 = clock();	for (int x = 0; x < width; x++) {		for (int y = 0; y < height; y++) {			currentPixel = y*width + x;						//Starting with a blank pixel			double tempRed[aadepth*aadepth];			double tempGreen[aadepth*aadepth];			double tempBlue[aadepth*aadepth];			for (int aax = 0; aax < aadepth; aax++) {				for (int aay = 0; aay < aadepth; aay++) {				aa_index = aay*aadepth + aax;				srand(time(0));				//Ray starts				if (aadepth == 1) {//No anti-aliasing									if (width > height) {						// the image is wider than it is tall						xamnt = ((x+0.5)/width)*aspectratio - (((width-height)/(double)height)/2);						yamnt = ((height - y) + 0.5)/height;					}					else if (height > width) {						// the imager is taller than it is wide						xamnt = (x + 0.5)/ width;						yamnt = (((height - y) + 0.5)/height)/aspectratio - (((height - width)/(double)width)/2);						}					else {						// the image is square						xamnt = (x + 0.5)/width;						yamnt = ((height - y) + 0.5)/height;						}					}				else {					// anti-aliasing					if (width > height) {						// the image is wider than it is tall						xamnt = ((x + (double)aax/((double)aadepth - 1))/width)*aspectratio - (((width-height)/(double)height)/2);						yamnt = ((height - y) + (double)aax/((double)aadepth - 1))/height;					}					else if (height > width) {						// the imager is taller than it is wide						xamnt = (x + (double)aax/((double)aadepth - 1))/ width;						yamnt = (((height - y) + (double)aax/((double)aadepth - 1))/height)/aspectratio - (((height - width)/(double)width)/2);					}					else {						// the image is square						xamnt = (x + (double)aax/((double)aadepth - 1))/width;									yamnt = ((height - y) + (double)aax/((double)aadepth - 1))/height;						}					}					Vect cam_ray_origin = scene_cam.getCameraPosition();					Vect cam_ray_direction = camdir.vectAdd(camright.vectMult(xamnt - 0.5).vectAdd(camdown.vectMult(yamnt - 0.5))).normalize();										Ray cam_ray (cam_ray_origin, cam_ray_direction);										vector<double> intersections;					for (int index = 0; index < scene_objects.size(); index++) {						intersections.push_back(scene_objects.at(index)->findIntersection(cam_ray));//Implemented in Sphere class, checks the ray's direction and origin to see if there is an intersection					}										int index_of_winning_object = collusion(intersections);//Checks if the ray intersects with any object										if (index_of_winning_object == -1) {						// set the backgroung black						tempRed[aa_index] = 0;						tempGreen[aa_index] = 0;						tempBlue[aa_index] = 0;					}					else{						// index coresponds to an object in our scene						if (intersections.at(index_of_winning_object) > accuracy) {							// determine the position and direction vectors at the point of intersection														Vect intersection_position = cam_ray_origin.vectAdd(cam_ray_direction.vectMult(intersections.at(index_of_winning_object)));							Vect intersecting_ray_direction = cam_ray_direction;							//IMPLEMENT GETCOLORAT							Color intersection_color = getColorAt(intersection_position, intersecting_ray_direction, scene_objects, index_of_winning_object, light_sources, accuracy, ambientlight);														tempRed[aa_index] = intersection_color.getColorRed();							tempGreen[aa_index] = intersection_color.getColorGreen();							tempBlue[aa_index] = intersection_color.getColorBlue();											}				}				}			}				//average the pixel color			double totalRed = 0;			double totalGreen = 0;			double totalBlue = 0;						for (int iRed = 0; iRed < aadepth*aadepth; iRed++) {				totalRed = totalRed + tempRed[iRed];			}			for (int iGreen = 0; iGreen < aadepth*aadepth; iGreen++) {				totalGreen = totalGreen + tempGreen[iGreen];			}			for (int iBlue = 0; iBlue < aadepth*aadepth; iBlue++) {				totalBlue = totalBlue + tempBlue[iBlue];			}						double avgRed = totalRed/(aadepth*aadepth);			double avgGreen = totalGreen/(aadepth*aadepth);			double avgBlue = totalBlue/(aadepth*aadepth);						pixels[currentPixel].r = avgRed;			pixels[currentPixel].g = avgGreen;			pixels[currentPixel].b = avgBlue;	}}		savebmp("CGrayed4.bmp",width,height,dpi,pixels);		//De-allocate	delete pixels, tempRed, tempGreen, tempBlue;	t2 = clock();	float diff = ((float)t2 - (float)t1)/1000;	cout <<"Output file has been created in "<< diff << " seconds" << endl;	return 0;}